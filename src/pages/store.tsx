import type { GetServerSideProps, NextPage } from 'next'
import type { Product } from '../@types/Product'

import Head from 'next/head'
import { useRouter } from 'next/router'
import { Fragment, useEffect, useState } from 'react'
import { Box, Checkbox, Container, Flex, Heading, SimpleGrid, Tag } from '@chakra-ui/react'

import { listFilteredProducts } from '../utils/products'
import { Header } from '../components/Header'
import { ProductStore } from '../components/ProductStore'
import { Rating } from '../components/Rating'
import { ParsedUrlQuery } from 'querystring'
import { CartStorage } from './cart'

interface SSR {
  products: Array<Product>
}

type Category = 'smartphone' | 'laptop'
type Rating = '1' | '2' | '3' | '4' | '5'

const Store: NextPage<SSR> = ({ products }) => {
  const router = useRouter()
  const [productsFiltered, setProductsFiltered] = useState(products)
  const [selectedCategories, setSelectedCategories] = useState<Array<Category>>([])
  const [selectedRatings, setSelectedRatings] = useState<Array<Rating>>([])
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    setProductsFiltered(products)
    setIsLoading(false)
  }, [products])

  async function handleCategoriesChange(category: Category) {
    setIsLoading(true)

    if (!selectedCategories.includes(category)) {
      const newCategories = [...selectedCategories, category]
      setSelectedCategories(newCategories)
      const query = { 
        category: newCategories,
        rating: selectedRatings
      }
      
      router.push({ href: '/store', query })
    } else {
      const newCategories = selectedCategories.filter((cat) => cat !== category)
      setSelectedCategories(newCategories)
      const query = { 
        category: newCategories,
        rating: selectedRatings
      }
      
      router.push({ href: '/store', query })
    }
  }

  async function handleRatingsChange(rating: Rating) {
    setIsLoading(true)

    if (!selectedRatings.includes(rating)) {
      const newRatings = [...selectedRatings, rating]
      setSelectedRatings(newRatings)
      const query = { 
        rating: newRatings,
        category: selectedCategories
      }
      
      router.push({ href: '/store', query })
    } else {
      const newRatings = selectedRatings.filter((cat) => cat !== rating)
      setSelectedRatings(newRatings)
      const query = { 
        rating: newRatings,
        category: selectedCategories
      }
      
      router.push({ href: '/store', query })
    }
  }

  function onBuy(product_id: number) {
    const cartStorage = localStorage.getItem('cart')
    const cart = cartStorage ? JSON.parse(cartStorage) as CartStorage[] : []

    const product = cart.find(({ id }) => id === product_id)
    if (!product) {
      const newCart = JSON.stringify([...cart, { id: product_id, quanty: 1 }])
      localStorage.setItem('cart', newCart)
    } else {
      const newCart = JSON.stringify(cart.map((productCart) => {
        if (productCart.id === product_id) return { ...productCart, quanty: productCart.quanty + 1 }
        return productCart
      }))
      localStorage.setItem('cart', newCart)
    }

    router.push('cart')
  }

  return (
    <Fragment>
      <Head>
        <title>Ebuy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <Container maxW="container.xl" display="flex">
        <Box width="full" maxWidth="72" marginRight="8">
          <Tag paddingX="4" paddingY="2">{ productsFiltered.length } produto(s) encontrado(s)</Tag>

          <Box mt="4">
            <Heading as="h2" fontSize="xl">Categorias</Heading>
            <Flex mt="1" flexDirection="column">
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleCategoriesChange('smartphone')}
                isChecked={selectedCategories.includes('smartphone')}
              >
                Celular
              </Checkbox>
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleCategoriesChange('laptop')}
                isChecked={selectedCategories.includes('laptop')}
              >
                Notebook
              </Checkbox>
            </Flex>
          </Box>
          
          <Box mt="6">
            <Heading as="h2" fontSize="xl">Classificação</Heading>
            <Flex mt="1" flexDirection="column">
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleRatingsChange('5')}
                isChecked={selectedRatings.includes('5')}
              >
                <Rating stars={5} />
              </Checkbox>
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleRatingsChange('4')}
                isChecked={selectedRatings.includes('4')}
              >
                <Rating stars={4} />
              </Checkbox>
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleRatingsChange('3')}
                isChecked={selectedRatings.includes('3')}
              >
                <Rating stars={3} />
              </Checkbox>
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleRatingsChange('2')}
                isChecked={selectedRatings.includes('2')}
              >
                <Rating stars={2} />
              </Checkbox>
              <Checkbox 
                colorScheme="blackAlpha"
                onChange={() => handleRatingsChange('1')}
                isChecked={selectedRatings.includes('1')}
              >
                <Rating stars={1} />
              </Checkbox>
            </Flex>
          </Box>
        </Box>

        { !isLoading ? (
            <SimpleGrid
              width="75%"
              justifyItems="center"
              minChildWidth="256px"
              spacing="8"
            >
              { productsFiltered.map(({ id, image_url, title, price, rating }) => (
                  <ProductStore 
                    key={id}
                    id={id}
                    image_url={image_url}
                    title={title}
                    price={price}
                    rating={rating}
                    buy={onBuy}
                  />
                ))
              }
            </SimpleGrid>
          ) : (
            <Flex
              width="full"
              justifyContent="center"
              alignItems="center"
            >
              Carregando...
            </Flex>
          )
        }
      </Container>
    </Fragment>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const products = await listFilteredProducts({ 
    category: query.category,
    rating: query.rating
  })

  return {
    props: {
      products
    }
  }
}

export default Store
