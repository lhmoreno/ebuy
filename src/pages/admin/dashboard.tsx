import type { NextPage } from 'next'

import Head from 'next/head'
import { supabaseClient, withAuthRequired } from '@supabase/supabase-auth-helpers/nextjs'
import { Button, Container, Flex, Heading, Input } from '@chakra-ui/react'
import { FormEvent, Fragment, useRef } from 'react'

import { Header } from '../../components/Header'

interface InputElement extends HTMLInputElement {
  isFocused: boolean
}

const Dashboard: NextPage = () => {
  const titleRef = useRef<InputElement>(null)
  const priceRef = useRef<InputElement>(null)
  const categoryRef = useRef<InputElement>(null)
  const imageRef = useRef<InputElement>(null)
  const ratingRef = useRef<HTMLInputElement>(null)

  async function onSubmit(event: FormEvent) {
    event.preventDefault()

    if (!titleRef.current || !priceRef.current || !categoryRef.current || !imageRef.current || !ratingRef.current) return

    const { value: title } = titleRef.current
    const { value: price } = priceRef.current
    const { value: category } = categoryRef.current
    const { value: image } = imageRef.current
    const { value: rating } = ratingRef.current

    if (title === '') return
    
    if (titleRef.current.isFocused) {
      priceRef.current.focus()
      return
    }

    if (price === '' || Number(price) > 32000) return
    
    if (priceRef.current.isFocused) {
      categoryRef.current.focus()
      return
    }

    if (category === '') return
    
    if (categoryRef.current.isFocused) {
      imageRef.current.focus()
      return
    }

    if (image === '' || !imageRef.current.files) return
    
    if (imageRef.current.isFocused) {
      ratingRef.current.focus()
      return
    }
    
    if (Number(rating) > 5 || Number(rating) < 0) return

    const imageName = Math.random().toString(36).slice(2) + '.png'

    await supabaseClient
      .storage
      .from('products')
      .upload(imageName, imageRef.current.files[0], {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false
      })

    await supabaseClient.from('products').insert({
      title,
      price,
      category,
      image: imageName,
      rating
    })
  }

  return (
    <Fragment>
      <Head>
        <title>Ebuy | Entrar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <Container
        maxW="container.xl" 
        height="calc(100vh - 93px)"
        display="flex" 
        alignItems="center" 
        justifyContent="center"
      >
        <Flex
          width="480px"
          padding="8"
          flexDirection="column"
          justifyContent="center"
          gap="2"
          borderRadius="lg"
          backgroundColor="blackAlpha.200"
        >
           <Heading
              as="h2"
              fontSize="2xl"
              marginBottom="4"
            >
              Novo produto
            </Heading>
            <form onSubmit={onSubmit}>
            <Input 
              ref={titleRef}
              autoFocus
              onFocus={() => {
                if (titleRef.current) {
                  return titleRef.current.isFocused = true
                }
              }}
              onBlur={() => {
                if (titleRef.current) {
                  return titleRef.current.isFocused = false
                }
              }}
              type="text"
              placeholder="Digite o nome"
              backgroundColor="white"
            />
            <Input 
              ref={priceRef}
              autoFocus
              onFocus={() => {
                if (priceRef.current) {
                  return priceRef.current.isFocused = true
                }
              }}
              onBlur={() => {
                if (priceRef.current) {
                  return priceRef.current.isFocused = false
                }
              }}
              type="number"
              placeholder="Digite o preço"
              marginTop="2"
              backgroundColor="white"
            />
            <Input 
              ref={categoryRef}
              autoFocus
              onFocus={() => {
                if (categoryRef.current) {
                  return categoryRef.current.isFocused = true
                }
              }}
              onBlur={() => {
                if (categoryRef.current) {
                  return categoryRef.current.isFocused = false
                }
              }}
              type="text"
              placeholder="Digite a categoria"
              marginTop="2"
              backgroundColor="white"
            />
            <Input 
              ref={imageRef}
              autoFocus
              onFocus={() => {
                if (imageRef.current) {
                  return imageRef.current.isFocused = true
                }
              }}
              onBlur={() => {
                if (imageRef.current) {
                  return imageRef.current.isFocused = false
                }
              }}
              type="file"
              accept="image/png"
              marginTop="2"
              backgroundColor="white"
            />
            <Input 
              ref={ratingRef}
              type="number"
              marginTop="2"
              placeholder="Digite a avaliação"
              backgroundColor="white"
            />
            <Button
              type="submit"
              marginTop="2"
              width="full"
              colorScheme="blackAlpha"
            >ADICIONAR</Button>
          </form>
        </Flex>
      </Container>
    </Fragment>
  )
}

export const getServerSideProps = withAuthRequired({ 
  redirectTo: '/signin' ,
  async getServerSideProps() {
    return { props: {} }
  }
})

export default Dashboard
